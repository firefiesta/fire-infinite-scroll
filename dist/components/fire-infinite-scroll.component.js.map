{"version":3,"file":"fire-infinite-scroll.component.js","sourceRoot":"","sources":["../../src/components/fire-infinite-scroll.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    AfterViewInit,\n    OnInit,\n    Inject,\n    forwardRef,\n    isDevMode\n} from '@angular/core';\n\n@Component({\n    selector: 'fire-infinite-scroll',\n    template: `<ion-grid *ngIf=\"!disabled\">\n        <ion-row>\n            <ion-col col-12 text-center>\n                <ion-spinner *ngIf=\"!image\" [name]=\"iconName\"></ion-spinner>\n                <img *ngIf=\"image\" [class]=\"image?.class\"  [src]=\"image?.url\" [alt]=\"image?.alt\">\n                <p *ngIf=\"text\">{{text}}</p>\n            </ion-col>\n        </ion-row>\n    </ion-grid>`\n})\nexport class FireInfiniteScroll implements AfterViewInit, OnInit\n{\n    isLoadedIntersectObserver: boolean = false;\n    @Input() disabled: boolean = true;\n    @Input() iconName: string = 'crescent';\n    @Input() image: {class_name: string, url: string, alt: string};\n    @Input() text: any = null;\n    @Input() root: any = null;\n    @Input() rootMargin: any = '0px';\n    @Input() threshold: any = 1.0;\n    @Output() onInfinite = new EventEmitter();\n\n    /**\n     *\n     * @param element\n     */\n    constructor(\n        @Inject(forwardRef(() => ElementRef)) public element: ElementRef\n    ){}\n\n    ngOnInit()\n    {\n        this.checkisLoadedIntersectObserver();\n    }\n\n    /**\n     *\n     */\n    ngAfterViewInit()\n    {\n        let self = this;\n\n        if (this.isLoadedIntersectObserver) {\n            let options = {\n                root: this.root, // relative to document viewport\n                rootMargin: this.rootMargin, // margin around root. Values are similar to css property. Unitless values not allowed\n                threshold: this.threshold // visible amount of item shown in relation to root\n            };\n\n            let observer = new IntersectionObserver(function (changes, observer) {\n                changes.forEach(change => {\n                    let isIntersecting = false;\n                    if (change.intersectionRatio > 0) {\n                        isIntersecting = true;\n                    }\n                    self.onInfinite.emit(isIntersecting);\n                });\n            }, options);\n\n            observer.observe(self.element.nativeElement);\n        }\n    }\n\n\n    /**\n     *\n     */\n    checkisLoadedIntersectObserver()\n    {\n        if ('IntersectionObserver' in window) {\n            // supported\n            this.isLoadedIntersectObserver = true;\n            if (isDevMode()) console.log('IntersectionObserver is loaded');\n        } else {\n            // not supported\n            this.isLoadedIntersectObserver = false;\n            if (isDevMode()) {\n                console.log('IntersectionObserver is not loaded');\n                console.log('You must install IntersectionObserver polyfill');\n                console.log('-----------------------------------------------');\n                console.log('npm install intersection-observer --save');\n                console.log('Adding the polyfill to your app in main.ts');\n                console.log(\"import 'intersection-observer/intersection-observer';\");\n            }\n        }\n    }\n}"]}