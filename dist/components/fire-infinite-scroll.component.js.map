{"version":3,"file":"fire-infinite-scroll.component.js","sourceRoot":"","sources":["../../src/components/fire-infinite-scroll.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACH,SAAS,EACT,UAAU,EACV,YAAY,EACZ,KAAK,EACL,MAAM,EAGN,MAAM,EACN,UAAU,EACV,SAAS,EACZ,MAAM,eAAe,CAAC;;IA0BnB;;;OAGG;IACH,4BACiD;QAAA,YAAO,GAAP,OAAO;yCAfnB,KAAK;wBACb,IAAI;wBACL,UAAU;oBAEjB,IAAI;oBACJ,IAAI;0BACE,KAAK;yBACN,GAAG;0BACN,IAAI,YAAY,EAAE;KAQtC;IAEH,qCAAQ,GAAR;QAEI,IAAI,CAAC,8BAA8B,EAAE,CAAC;KACzC;IAED;;OAEG;;;;IACH,4CAAe;;;IAAf;QAEI,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,EAAE,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC;YACjC,IAAI,OAAO,GAAG;gBACV,IAAI,EAAE,IAAI,CAAC,IAAI;;gBACf,UAAU,EAAE,IAAI,CAAC,UAAU;;gBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;aAC5B,CAAC;YAEF,IAAI,QAAQ,GAAG,IAAI,oBAAoB,CAAC,UAAU,OAAO,EAAE,QAAQ;gBAC/D,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;oBAClB,IAAI,cAAc,GAAG,KAAK,CAAC;oBAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC/B,cAAc,GAAG,IAAI,CAAC;qBACzB;oBACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBACxC,CAAC,CAAC;aACN,EAAE,OAAO,CAAC,CAAC;YAEZ,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;SAChD;KACJ;IAGD;;OAEG;;;;IACH,2DAA8B;;;IAA9B;QAEI,EAAE,CAAC,CAAC,sBAAsB,IAAI,MAAM,CAAC,CAAC,CAAC;;YAEnC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YACtC,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;gBAAC,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;SAClE;QAAC,IAAI,CAAC,CAAC;;YAEJ,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;YACvC,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;gBACd,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;gBAClD,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;gBAC9D,OAAO,CAAC,GAAG,CAAC,iDAAiD,CAAC,CAAC;gBAC/D,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;gBACxD,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;gBAC1D,OAAO,CAAC,GAAG,CAAC,uDAAuD,CAAC,CAAC;aACxE;SACJ;KACJ;;gBAvFJ,SAAS,SAAC;oBACP,QAAQ,EAAE,sBAAsB;oBAChC,QAAQ,EAAE,uYAQE;iBACf;;;;gBAtBG,UAAU,uBAwCL,MAAM,SAAC,UAAU,CAAC,cAAM,OAAA,UAAU,EAAV,CAAU,CAAC;;;6BAdvC,KAAK;6BACL,KAAK;0BACL,KAAK;yBACL,KAAK;yBACL,KAAK;+BACL,KAAK;8BACL,KAAK;+BACL,MAAM;;6BAnCX;;SAyBa,kBAAkB","sourcesContent":["import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    AfterViewInit,\n    OnInit,\n    Inject,\n    forwardRef,\n    isDevMode\n} from '@angular/core';\n\n@Component({\n    selector: 'fire-infinite-scroll',\n    template: `<ion-grid *ngIf=\"!disabled\">\n        <ion-row>\n            <ion-col col-12 text-center>\n                <ion-spinner *ngIf=\"!image\" [name]=\"iconName\"></ion-spinner>\n                <img *ngIf=\"image\" [class]=\"image?.class\"  [src]=\"image?.url\" [alt]=\"image?.alt\">\n                <p *ngIf=\"text\">{{text}}</p>\n            </ion-col>\n        </ion-row>\n    </ion-grid>`\n})\nexport class FireInfiniteScroll implements AfterViewInit, OnInit\n{\n    isLoadedIntersectObserver: boolean = false;\n    @Input() disabled: boolean = true;\n    @Input() iconName: string = 'crescent';\n    @Input() image: {class_name: string, url: string, alt: string};\n    @Input() text: any = null;\n    @Input() root: any = null;\n    @Input() rootMargin: any = '0px';\n    @Input() threshold: any = 1.0;\n    @Output() onInfinite = new EventEmitter();\n\n    /**\n     *\n     * @param element\n     */\n    constructor(\n        @Inject(forwardRef(() => ElementRef)) public element: ElementRef\n    ){}\n\n    ngOnInit()\n    {\n        this.checkisLoadedIntersectObserver();\n    }\n\n    /**\n     *\n     */\n    ngAfterViewInit()\n    {\n        let self = this;\n\n        if (this.isLoadedIntersectObserver) {\n            let options = {\n                root: this.root, // relative to document viewport\n                rootMargin: this.rootMargin, // margin around root. Values are similar to css property. Unitless values not allowed\n                threshold: this.threshold // visible amount of item shown in relation to root\n            };\n\n            let observer = new IntersectionObserver(function (changes, observer) {\n                changes.forEach(change => {\n                    let isIntersecting = false;\n                    if (change.intersectionRatio > 0) {\n                        isIntersecting = true;\n                    }\n                    self.onInfinite.emit(isIntersecting);\n                });\n            }, options);\n\n            observer.observe(self.element.nativeElement);\n        }\n    }\n\n\n    /**\n     *\n     */\n    checkisLoadedIntersectObserver()\n    {\n        if ('IntersectionObserver' in window) {\n            // supported\n            this.isLoadedIntersectObserver = true;\n            if (isDevMode()) console.log('IntersectionObserver is loaded');\n        } else {\n            // not supported\n            this.isLoadedIntersectObserver = false;\n            if (isDevMode()) {\n                console.log('IntersectionObserver is not loaded');\n                console.log('You must install IntersectionObserver polyfill');\n                console.log('-----------------------------------------------');\n                console.log('npm install intersection-observer --save');\n                console.log('Adding the polyfill to your app in main.ts');\n                console.log(\"import 'intersection-observer/intersection-observer';\");\n            }\n        }\n    }\n}"]}